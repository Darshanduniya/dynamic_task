from airflow import DAG
from airflow.operators.dummy import DummyOperator
from airflow.operators.python import PythonOperator, BranchPythonOperator
from datetime import datetime

def check_task_2_output(**kwargs):
    """Function to decide which path to take based on task_2 output"""
    task_2_output = kwargs['ti'].xcom_pull(task_ids='task_2')
    if task_2_output == "yes":
        return "generated_task"
    else:
        return "suppren_task"

def dummy_task(**kwargs):
    """Simulated dummy task"""
    return "yes"  # Change to "no" to test the other branch

with DAG(
    dag_id="dynamic_task_generation",
    start_date=datetime(2024, 2, 1),
    schedule_interval="@daily",
    catchup=False,
) as dag:
    
    start = DummyOperator(task_id="start")

    task_1 = PythonOperator(task_id="task_1", python_callable=dummy_task)
    task_2 = PythonOperator(task_id="task_2", python_callable=dummy_task)
    task_3 = PythonOperator(task_id="task_3", python_callable=dummy_task)
    task_4 = PythonOperator(task_id="task_4", python_callable=dummy_task)

    branch_task = BranchPythonOperator(
        task_id="branch_task",
        python_callable=check_task_2_output,
        provide_context=True
    )

    generated_task = PythonOperator(task_id="generated_task", python_callable=dummy_task)
    suppren_task = PythonOperator(task_id="suppren_task", python_callable=dummy_task)

    monet_task = PythonOperator(task_id="monet_task", python_callable=dummy_task)
    model_task = PythonOperator(task_id="model_task", python_callable=dummy_task)

    # Task dependencies
    start >> task_1 >> task_2 >> task_3 >> task_4 >> branch_task
    branch_task >> generated_task >> monet_task
    branch_task >> suppren_task >> model_task
